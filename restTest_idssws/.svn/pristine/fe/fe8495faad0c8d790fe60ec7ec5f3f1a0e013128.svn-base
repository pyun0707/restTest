package kt.idss.ktws.common.dao;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

@Repository
public class CrisDaoImple implements CrisDao {

    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;

    @Autowired
    @Qualifier("idmsmst_ktws_mds")
    public void setDataSource(DataSource dataSource) {
        this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(dataSource);
    }
    @Override
    public String readRealByVirtrue(String type, String value) {
        MapSqlParameterSource namedParameters = new MapSqlParameterSource();
        StringBuffer sql = new StringBuffer();
        sql.append("\n select idms_util.cris_vrtltoreal(:type,:value) as vitureNum ");
        sql.append("\n   from dual                                                 ");
        namedParameters.addValue("type"    , type   );
        namedParameters.addValue("value"   , value  );
        return this.namedParameterJdbcTemplate.queryForObject(sql.toString(), namedParameters ,String.class);
    }

    @Override
    public String readVirtureByReal(String type,String value) {
        MapSqlParameterSource namedParameters = new MapSqlParameterSource();
        StringBuffer sql = new StringBuffer();
        sql.append("\n select idms_util.cris_realtovrtl(:type,:value) as vitureNum ");
        sql.append("\n   from dual                                                 ");
        namedParameters.addValue("type"    , type   );
        namedParameters.addValue("value"   , value  );
        return this.namedParameterJdbcTemplate.queryForObject(sql.toString(), namedParameters ,String.class);
    }

    @Override
    public String readIpinCiByVirture(String type,String value) {
        MapSqlParameterSource namedParameters = new MapSqlParameterSource();
        StringBuffer sql = new StringBuffer();
        sql.append("\n select idms_util.cris_vrtltoci(:type,:value) as vitureNum ");
        sql.append("\n   from dual                                                 ");
        namedParameters.addValue("type"    , type   );
        namedParameters.addValue("value"   , value  );
        return this.namedParameterJdbcTemplate.queryForObject(sql.toString(), namedParameters ,String.class);
    }

    @Override
    public String readIpinCiByReal(String type,String value) {
        MapSqlParameterSource namedParameters = new MapSqlParameterSource();
        StringBuffer sql = new StringBuffer();
        sql.append("\n select idms_util.cris_realtoci(:type,:value) as vitureNum ");
        sql.append("\n   from dual                                                 ");
        namedParameters.addValue("type"    , type   );
        namedParameters.addValue("value"   , value  );
        return this.namedParameterJdbcTemplate.queryForObject(sql.toString(), namedParameters ,String.class);
    }

}
