package kt.idss.ktid.validation;

import java.util.Arrays;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.Errors;
import org.springframework.validation.FieldError;
import org.springframework.validation.ObjectError;
import org.springframework.validation.Validator;

import kt.idss.ktid.ws.spec.RecvHeaderForm;
import kt.idss.ktws.enums.ResponseSpec;
import kt.idss.ktws.exception.ServiceException;


@Component
public class HeaderValidator implements Validator{

    private static final Logger logger = LoggerFactory.getLogger(HeaderValidator.class);

    public boolean supports(Class<?> clazz) {
        return RecvHeaderForm.class.equals(clazz);
    }

    public void validate(Object target, Errors errors) {

        RecvHeaderForm request = (RecvHeaderForm) target;

        if(request.getUser_ip() == null || request.getUser_ip().isEmpty()==true){
            errors.rejectValue("user_ip",ResponseSpec.BAD_REQUEST.intValue(),"user ip must be");
        }
        if (request.getUser_ip().length() > 15){
            errors.rejectValue("user_ip",ResponseSpec.BAD_REQUEST.intValue(), "user ip too long (max 15)");
        }

        if(request.getSystem_id() == null || request.getSystem_id().isEmpty()==true){
            errors.rejectValue("system_id",ResponseSpec.BAD_REQUEST.intValue(),"system id must be");
        }
        if (request.getSystem_id().length() > 4){
            errors.rejectValue("system_id",ResponseSpec.BAD_REQUEST.intValue(), "system id too long (max 4)");
        }

        if(request.getSystem_ip() == null || request.getSystem_ip().isEmpty()==true){
            errors.rejectValue("system_ip",ResponseSpec.BAD_REQUEST.intValue(),"system ip must be");
        }
        if (request.getSystem_ip().length() > 15){
//            request_ip >> system_ip
            errors.rejectValue("system_ip",ResponseSpec.BAD_REQUEST.intValue(), "system ip too long (max 15)");
        }

        if(request.getWorker_id () == null || request.getWorker_id().isEmpty()==true){
            errors.rejectValue("worker_id",ResponseSpec.BAD_REQUEST.intValue(),"worker id must be");
        }
        if (request.getWorker_id().length() > 20){
            errors.rejectValue("worker_id",ResponseSpec.BAD_REQUEST.intValue(), "worker id too long (max 20)");
        }
    }
    public void validate(RecvHeaderForm request, String object_name){

        BeanPropertyBindingResult    errors  = null;
        try{

            errors     = new BeanPropertyBindingResult(request, object_name);

            validate(request, errors);

            if(errors.hasErrors()){

                logger.info("error count : {} " ,errors.getErrorCount());
                List<ObjectError> allObjectErrors = errors.getAllErrors();
                String detailMessage = null;
                for (ObjectError objectError : allObjectErrors){
                    if (objectError instanceof FieldError){
                        FieldError fieldError = (FieldError)objectError;
                        logger.info("Field name is {}", fieldError.getField());
                    }
                    logger.info("Codes            : {}" , Arrays.asList(objectError.getCodes()).toString());
                    logger.info("Error Code is    : {}" , objectError.getCode());
                    logger.info("Default message  : {}" , objectError.getDefaultMessage());
                    if(detailMessage ==null){
                        detailMessage = objectError.getDefaultMessage() == null ? "":objectError.getDefaultMessage() ;
                    }
                }
                throw new ServiceException( ResponseSpec.BAD_REQUEST.intCode()
                                           ,ResponseSpec.BAD_REQUEST.intValue());

            }
        }catch(ServiceException e){
            throw e;
        }catch(Exception e){
            //e.printStackTrace();
            throw new ServiceException( ResponseSpec.INTERNAL_SERVER_ERROR.intCode()
                                       ,ResponseSpec.INTERNAL_SERVER_ERROR.intValue());
        }
    }
}
